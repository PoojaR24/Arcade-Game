/* Global Enemies Array
 * All enemies generated by Enemies.spawn
 * pushed into the array.
 */
var allEnemies = [];

/* Global Gems Array.
 * All gems generated by Gems.spawn()
 * pushed into this array.
 */
var allGems = [];
/* Pause the game by default to prevent the player moving around
 * when arrow keys are pressed. Set to false when the start or
 * game over screens are hidden from view.
 */
var paused = true;
// All the constant values
var constant = {
                  // Default canvas text font family
                  FONT : '20pt lobster',
                  // Default canvas text font color
                  FONT_COLOR: 'white',
                  //height of game element
                  HEIGHT : 50,
                  //width of game element
                  WIDTH : 50,
                  //min speed of enemy
                  MIN_SPEED : 50,
                  //max speed of enemy
                  MAX_SPEED : 400,
                  // Player's start x-position on the canvas
                  PLAYER_START_X : 300,
                  // Player's start y-position on the canvas
                  PLAYER_START_Y : 400,
                  // Player movement distance
                  PLAYER_MOVEMENT : 50,
                  // X position array for game elements
                  POSITION_X : [0, 100, 200, 300, 400, 500, 600],
                  // Y position array for game elements
                  POSITION_Y : [150, 200,250, 300],
                  // Left canvas boundary
                  LEFT_BOUND : 0,
                  // Top canvas boundary
                  TOP_BOUND : 50,
                  // Right canvas boundary
                  RIGHT_BOUND : 600,
                  // Bottom canvas boundary
                  BOTTOM_BOUND : 400
};

$(document).ready(function() {

    // Hide the start screen on button click
    $("#playGame").click(function() {
        // Hide the start screen
        $("#startScreen").fadeOut('fast');
        paused = false;
    });

    // Hide the game over screen on button click
    $("#playAgain").click(function() {
        // Hide the game over screen
        $("#gameOver").hide()
        paused = false;
    });

    // Show the how to play screen on click
    $("#howToOpen").click(function() {

        $("#howTo").fadeIn('fast');
    });

    // Hide the how to play screen on click
    $("#howToClose").click(function() {
        $("#howTo").fadeOut('fast');
    });

});


// Enemies our player must avoid
var Enemy = function(Y, s) {
    // The image/sprite for our enemies, this uses
    this.sprite = 'images/enemy-bug.png';
    //set any random x position
    this.x = getRandomInt(-1000, -100);
    //set the y position to 'Y' argument value
    this.y = Y;
    //set height of enemy
    this.height = constant.HEIGHT;
    //set width of enemy
    this.width = constant.WIDTH;
    //set the speed of enemy to 's' argument value
    this.speed = s;
};


/* Update the enemy's position on canvas
Accepts agrgument dt, a time delta between ticks
this dt speed is multiplied by the dt parameter,
in order to ensure the game runs at the same speed for all computers.
*/
Enemy.prototype.update = function(dt) {

            //To give an animation effect to the movement
            this.x = this.x + this.speed * dt;
            /*If enemy moves off the right of canvas then,
             *place it at a random position off to the left
             *of canvas
             */
            if(this.x > canvas.width){
                this.x = getRandomInt(-1000,-100);
				console.log(dt);
            }
};
/* Draw the enemy on to the screen,
 * the enemies y position on canvas
 * set by the argument passed to its
 *constructor function
 */
Enemy.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

/*
 *Function to generate enemies
 *Used to generate and remove enemies from canvas.
 */

var Enemies = function(){
/*
 *New enemies pushed into the array
 *then pushed into global allEnemies array
 */
   this.enemiesArray = [];
};

Enemies.prototype.spawn = function(num) {

    for(var i = 0; i < num ; i++){
        // set speed of enemy.
        var speed = getRandomInt(constant.MIN_SPEED, constant.MAX_SPEED);
        // set players y position on canvas
        var position = getRandomInt(0,3);
        // To initiate a new enemy object.
        this.enemiesArray[allEnemies.length] = new Enemy(constant.POSITION_Y[position], speed);
        // Push new enemy into global enemies array.
        allEnemies.push(this.enemiesArray[allEnemies.length]);
    }
};

/* Reset Enemies.
 *clear all enemies from canvas
 */
Enemies.prototype.reset = function() {
       var eCount = allEnemies.length;
       for(i = 0; i < eCount; i++) {
        allEnemies.splice(i, allEnemies.length);
       }
};

//Instantiate new enemies obj
 var enemies = new Enemies(10,10);

 /* Gem Class
  *  responsible for generation of gems,For clearing
  * and reseting gems which are collectable.
  * Accepts two arguments, the x and y position of gem.
  */
var Gem = function(X, Y) {
        // Include the blue, green and orange gem images in an array
        var gemArray = ['Gem Blue.png', 'Gem Green.png', 'Gem Orange.png', 'Key.png', 'Star.png', 'Heart.png'];
        // Set a random gem image from the gemArray
        this.sprite = 'images/' + gemArray[getRandomInt(0,5)];
        // Set the gem's height
        this.height = constant.HEIGHT;
        // Set the gem's width
        this.width = constant.WIDTH;
        // Set a the x position of the gem
        this.x = X;
        // Set a the y position of the gem
        this.y = Y;
};
/* Draw gem to canvas
 * determines gem's x and y positions by randomly picking from
 * the constant arrays POSITION_X and POSITION_Y.
 */
Gem.prototype.render = function() {
          ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};
/* Clearing Gem
 * Hide the gem by setting its x position to a negative value on the canvas
 */
Gem.prototype.clear = function() {
        this.x = -100;

};
/* Reseting Gem
 * Reseting the Gem will instantiate a new Gem object and in turn reset
 * the gem type and position on the canvas.
 */
Gem.prototype.reset = function() {
        gem = new Gem();
};
// Instantiate a new Gem object
var gem = new Gem();
/* Generating Gems
 * This class is responsible for generating new gems and
 * removing them from the canvas.
 */
var Gems = function() {
        /* Gems generated are pushed into an array
         * before being pushed into the global gems array
         */
        this.gemsArray = [];
};
/* Generate Gems
 * This accepts an argument to determine the number of
 * gems to generate and push into the allGems array.
 */
Gems.prototype.spawn = function(num) {

        for(var i = 0; i < num; i++) {
            // set the gems x position on the canvas.
            var positionX = getRandomInt(0, 6);
            // set the gems y position on the canvas.
            var positionY = getRandomInt(0, 3);
            // Instatiate a new gem object.
            this.gemsArray[allGems.length] = new Gem(constant.POSITION_X[positionX], constant.POSITION_Y[positionY]);
            // Push the new gem into the allGems array.
            allGems.push(this.gemsArray[allGems.length]);
        }

};

/* Reset Gems
 * Clears all gems from the canvas
 */
 Gems.prototype.reset = function(){
     var gCount = allGems.length;
     for(i = 0; i < gCount; i++){
        allGems.splice(i, allGems.length);
     }
 };
// Instantiate a new Gems object
var gems = new Gems();

/* Player class
 * Class responsible for rendering the player,
 * Updating players position on th canvas and
 * Updating players lives.
 */
var Player = function() {
              //set the player's image
              this.sprite = "images/char-boy.png";
              // set player's x position on canvas
              this.x = constant.PLAYER_START_X;
              // set player's y position on canvas
              this.y = constant.PLAYER_START_Y;
              // set player's height
              this.height = constant.HEIGHT;
              // set player's width
              this.width = constant.WIDTH;
              /* Set players lives.
               * Starts with 3 lives.
               */
               this.lives = 1;
};

//Update players position on canvas
Player.prototype.update = function(){
                 this.xPos = this.x;
                 this.yPos = this.y;
};
//Reset player position
Player.prototype.reset = function(){
                 this.x = constant.PLAYER_START_X;
                 this.y = constant.PLAYER_START_Y;
};
// Player hit. (when the player collides with an enemy)
Player.prototype.hit = function() {
        this.x = constant.PLAYER_START_X;
        this.y = constant.PLAYER_START_Y;
        $("#collision").show().fadeOut();
};
/* Update player's lives
 * The 'action', which can be either
 * add or remove and 'value' which indicates the the number
 * of lives to add or remove is given by arguments.
 * After adding/removing a life, update the stats.
 */
Player.prototype.updateLives = function(action, value) {

        // Add a life
        if(action === "add") {
                this.lives = this.lives + value;
        }
        // Remove a life
        if(action === "remove") {
                this.lives = this.lives - value;
        }
        // Update the lives stats
        stats.updateLives(this.lives);

};

// Draw the player on the canvas
Player.prototype.render = function() {
        ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};
// Handle the left, up, right & down keyboard arrow keys
Player.prototype.handleInput = function(key) {

        /* If the left arrow key is pressed and the
         * player is within the left boundary of the
         * canvas, allow the player to go move left.
         */
        if(key === 'left' && this.x != constant.LEFT_BOUND) {
                this.x = this.xPos + -constant.PLAYER_MOVEMENT;
        }
        /* If the up arrow key is pressed and the
         * player is within the top boundary of the
         * canvas, allow the player to move upwards.
         */
        if(key === 'up' && this.y != constant.TOP_BOUND) {
                this.y = this.yPos + -constant.PLAYER_MOVEMENT;
        }
        /* If the right arrow key is pressed and the
         * player is within the right boundary of the
         * canvas, allow the player to move right.
         */
        if(key === 'right' && this.x != constant.RIGHT_BOUND) {
                this.x = this.xPos + constant.PLAYER_MOVEMENT;
        }
        /* If the down arrow key is pressed and the
         * player is within the bottom boundary of the
         * canvas, allow the player to move down.
         */
        if(key === 'down' && this.y != constant.BOTTOM_BOUND) {
                this.y = this.yPos + constant.PLAYER_MOVEMENT;
        }

};
// Instantiate new Player object
var player = new Player();

 /* Level Class
 * This class is responsible for keeping track of and reseting the level.
 */
var Level = function() {
        this.level = 1;
        enemies.spawn(2);
        gems.spawn(2);
};
/* Update the level:
 * - increase level
 * - spawn enemies
 * - reset collectable gems
 * - spawn a random amount of collectable gems
 * - reset player position
 * - update level stat
 * - update the score
 */
 Level.prototype.update = function() {
        this.level++;
        // Span enemies when the level is divisable by 2
        if(this.level % 2) {
            enemies.spawn(1);
        }
        gems.reset();
        gems.spawn(getRandomInt(2,4));
        player.reset();
        stats.updateLevel(this.level);
        stats.updateScore();
};
/* Reset the level:
 * - reset to level 1
 * - reset player
 * - reset enemies
 * - reset gem
 * - reset stats
 * - update player lives
 * - spawn enemies
 * - pause the game to prevent player movement
 * - show game over screen
 */
  var flag=0;
 var start=0;  // set the flag here
Level.prototype.reset = function() {
        this.level = 1;
        player.reset();
        enemies.reset();
        gem.reset();

        stats.reset();
        player.updateLives('add', 2);
        enemies.spawn(2);
        paused = true;

		if(start)
        $("#gameOver").show(); //used the flag here reset it at reset() in engine.js.
};
// Instantiate a new level object
var level = new Level();
/* Stats Class
 * responsible for rendering, updating and reseting the game statisitcs,
 * The current level and score.
 */
var Stats = function() {
        this.font = constant.FONT;
        this.fontColor = constant.FONT_COLOR;
        this.currentLevel = level.level;
        this.currentLives = player.lives;
        this.currentScore = 0;
        this.currentGems = 0;
};
// Render the stat bar, level text, score text, lives count and gems count
Stats.prototype.render = function() {
        ctx.fillStyle = 'rgba(0,0,0,0.5)';
        ctx.fillRect(0,50, 707, 45);
        this.level();
        this.score();
        this.lives();
        this.gems();
};
// Level text
Stats.prototype.level = function() {
        ctx.font = this.font;
        ctx.fillStyle = this.fontColor;
        ctx.textAlign = 'start';
        ctx.fillText('Level '+ this.currentLevel, 10, 82);
};
// Update level
Stats.prototype.updateLevel = function(level) {
        this.currentLevel = level;
};
// Score text
Stats.prototype.score = function() {
        ctx.font = this.font;
        ctx.fillStyle = this.fontColor;
        ctx.textAlign = 'end';
        ctx.fillText(this.currentScore, 700, 82);
};
// Update score stat
Stats.prototype.updateScore = function() {
        this.currentScore = this.currentScore + 600;
};
// Lives icon & text
Stats.prototype.lives = function() {
        ctx.drawImage(Resources.get("images/stat-heart.png"), 430, 62);
        ctx.font = this.font;
        ctx.fontStyle = this.fontColor;
        ctx.textAlign = 'start';
        ctx.fillText('x '+ this.currentLives, 465, 82);
};
// Update lives stat
Stats.prototype.updateLives = function(lives) {
        this.currentLives = lives;
};
// Gems icon & text
Stats.prototype.gems = function() {
        ctx.drawImage(Resources.get('images/stat-gem.png'), 340, 62);
        ctx.font = this.font;
        ctx.fontStyle = this.fontColor;
        ctx.textAlign = 'start';
        ctx.fillText('x '+ this.currentGems, 370, 82);
};
// Update gem stat
Stats.prototype.updateGems = function() {
        this.currentGems++;
        this.currentScore = this.currentScore + 300;
};
// Reset stats
Stats.prototype.reset = function() {
        $("#gameOver #score").html(this.currentScore);
        this.currentScore = 0;
        this.currentGems = 0;
        this.currentLevel = level.level;
};

// Instatiate a new Stats object
var stats = new Stats();
// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };

    if(!paused){
       player.handleInput(allowedKeys[e.keyCode]);
  }
});

/* Returns a random integer.
 * a minimum and maximum number is given as arguments.
 */
function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
}

